TODAVIA NO ME CONTESTE DEJAME PASARTE TODO EL PROJECTO  ESTE ES App.js

//APP.JS  src/App.js

import React, { useState, useEffect } from 'react';
import './App.css'; // Importa el CSS global
import Menu from './Menu'; // Importa el componente Menu
import NavBar from './NavBar'; // Importa el componente NavBar

// --- IMPORTACIONES DE IMÁGENES ---
// **MUY IMPORTANTE:** AJUSTA ESTAS RUTAS Y NOMBRES DE ARCHIVO
// PARA QUE COINCIDAN EXACTAMENTE CON LOS NOMBRES DE TUS IMÁGENES EN LA CARPETA 'src/images'
// Según tu estructura.jpg, tienes image1.jpg y image2.png
import img1 from './images/image1.jpg'; // Usaremos esta para 'Pasta Alfredo' y otras por defecto
import img2 from './images/image2.png'; // Usaremos esta para 'Huevos Rancheros' y otras por defecto

// Si tienes otras imágenes específicas para cada receta (como 'huevos-rancheros.jpg', etc.),
// importarlas aquí con sus nombres reales sería lo ideal.
// Por ejemplo:
// import huevosRancherosImg from './images/huevos-rancheros.jpg';
// import pastaAlfredoImg from './images/pasta-alfredo.jpg';
// Y luego usarlas en las recetasIniciales.
// Para este ejemplo, usaré img1 y img2 como las que ya tenías definidas.


// Definición de las recetas iniciales (tal como las proporcionaste)
const recetasIniciales = {
  huevos: {
    nombre: 'Huevos Rancheros',
    ingredientes: ['2 Huevos', '1 Tortilla de maíz', 'Salsa ranchera', 'Frijoles refritos', 'Queso fresco'],
    instrucciones: '1. Calienta la tortilla y los frijoles.<br />2. Fríe los huevos al gusto.<br />3. Sirve los huevos sobre la tortilla con frijoles, salsa ranchera y queso.',
    imagen: img2, // Usamos img2 como estaba definido en tu código original
  },
  pasta: {
    nombre: 'Pasta Alfredo',
    ingredientes: ['200g Pasta fettuccine', '50g Mantequilla', '1 taza Crema para batir', '1/2 taza Queso parmesano rallado', 'Sal', 'Pimienta'],
    instrucciones: '1. Cocina la pasta según las instrucciones del paquete.<br />2. Mientras tanto, derrite la mantequilla en una sartén.<br />3. Agrega la crema y cocina a fuego lento.<br />4. Incorpora el queso parmesano y sazona con sal y pimienta.<br />5. Mezcla la salsa con la pasta escurrida.',
    imagen: img1, // Usamos img1 como estaba definido en tu código original
  },
  sopa: {
    nombre: 'Sopa de Tomate Cremosa',
    ingredientes: ['1 kg Tomates maduros', '1 Cebolla', '2 dientes de Ajo', 'Caldo de verduras', 'Crema de leche', 'Albahaca fresca'],
    instrucciones: '1. Sofríe cebolla y ajo.<br />2. Añade tomates y caldo, cocina.<br />3. Licúa la mezcla, cuela.<br />4. Calienta, añade crema y albahaca. Sirve.',
    imagen: img2, // Usa la imagen que desees
  },
  ensalada: {
    nombre: 'Ensalada Mediterránea',
    ingredientes: ['Lechuga variada', 'Tomates cherry', 'Pepino', 'Aceitunas Kalamata', 'Queso feta', 'Aderezo de aceite y limón'],
    instrucciones: '1. Lava y corta los vegetales.<br />2. Desmorona el queso feta.<br />3. Combina todos los ingredientes en un bol grande.<br />4. Aliña con aceite de oliva, zumo de limón, sal y pimienta.',
    imagen: img1, // Usa la imagen que desees
  }
};

// --- Mapeo de categorías del menú lateral a las claves de las recetas y sus imágenes ---
// Este objeto es CRUCIAL para mostrar las imágenes correctas en el Menu lateral.
// Las CLAVES deben coincidir con los NOMBRES que aparecen en tus elementos del menú lateral (ej. "Huevos").
// Los VALORES deben ser las imágenes importadas que quieres mostrar para esa categoría.
const categoryToDisplayImageMap = {
  "Huevos": img2, // La imagen para "Huevos" en el sidebar
  "Arroz con huevos": img1, // La imagen para "Arroz con huevos" en el sidebar (ajusta si es diferente)
  "Comida 2": img2, // La imagen para "Comida 2" en el sidebar
  "Comida 3": img1, // La imagen para "Comida 3" en el sidebar
  // Añade más si tienes otras categorías en tu sidebar, asignándoles img1 o img2 según corresponda.
  // "Huevos Rancheros": img2, // Si el nombre de tu categoría es "Huevos Rancheros"
  // "Pasta Alfredo": img1,
  // "Sopa de Tomate Cremosa": img2,
  // "Ensalada Mediterránea": img1,
};

function App() {
  const [recetas, setRecetas] = useState(() => {
    const savedRecipes = localStorage.getItem('recetas');
    return savedRecipes ? JSON.parse(savedRecipes) : recetasIniciales;
  });

  const [recetaSeleccionada, setRecetaSeleccionada] = useState(recetas.huevos);
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [isSidebarVisible, setIsSidebarVisible] = useState(true);

  // Datos para las categorías del menú lateral.
  // Los 'name' aquí deben coincidir con las claves en 'categoryToDisplayImageMap'.
  const categoriesData = [
    { id: 'cat1', name: 'Huevos' },
    { id: 'cat2', name: 'Arroz con huevos' },
    { id: 'cat3', name: 'Comida 2' },
    { id: 'cat4', name: 'Comida 3' },
    // Asegúrate de que esta lista de 'name' coincida exactamente con lo que aparece en tu sidebar.
    // Si tu sidebar muestra "Huevos Rancheros" en lugar de "Huevos", cámbialo aquí y en categoryToDisplayImageMap.
  ];

  useEffect(() => {
    localStorage.setItem('recetas', JSON.stringify(recetas));
  }, [recetas]);

  // Función que se llama cuando se hace clic en una categoría del menú lateral
  const manejarClickCategoria = (categoryName) => {
    // Necesitamos mapear el nombre de la categoría del menú a la clave de la receta en 'recetas'
    let recetaKey = categoryName.toLowerCase().replace(/\s/g, ''); // Default conversion

    // Manejo específico si los nombres de las categorías son diferentes a las claves de las recetas
    if (categoryName === 'Huevos') recetaKey = 'huevos';
    else if (categoryName === 'Pasta Alfredo') recetaKey = 'pasta';
    else if (categoryName === 'Sopa de Tomate Cremosa') recetaKey = 'sopa';
    else if (categoryName === 'Ensalada Mediterránea') recetaKey = 'ensalada';
    // Si tus categorías en el menú son "Comida 2", "Comida 3", etc., y no corresponden directamente a recetas,
    // puedes decidir qué receta mostrar, o simplemente no cambiar la receta seleccionada.
    // Por ahora, si no coincide con una receta principal, no la cambia.

    if (recetas[recetaKey]) { // Solo actualiza si la clave de la receta existe
      setRecetaSeleccionada(recetas[recetaKey]);
    } else {
      // Opcional: Si la categoría no tiene una receta asociada, puedes mostrar un mensaje o la receta por defecto
      console.warn(`No se encontró una receta para la categoría: ${categoryName}`);
    }

    setMostrarFormulario(false); // Asegúrate de ocultar el formulario
    // Opcional: Oculta la barra lateral automáticamente al seleccionar una categoría en móvil
    if (window.innerWidth <= 768) {
      setIsSidebarVisible(false);
    }
  };

  const handleAddRecipe = () => {
    setMostrarFormulario(true);
    setIsSidebarVisible(false);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const nombre = event.target.nombre.value;
    const ingredientes = event.target.ingredientes.value.split(',').map(item => item.trim());
    const instrucciones = event.target.instrucciones.value.replace(/\n/g, '<br />');

    const imagenFile = event.target.imagen.files[0];
    const imagenUrl = imagenFile ? URL.createObjectURL(imagenFile) : img1; // Usa img1 como fallback por defecto

    const nuevaReceta = {
      nombre,
      ingredientes,
      instrucciones,
      imagen: imagenUrl,
    };

    const recetaKey = nombre.toLowerCase().replace(/\s/g, '');

    setRecetas(prevRecetas => ({
      ...prevRecetas,
      [recetaKey]: nuevaReceta,
    }));

    setMostrarFormulario(false);
    setIsSidebarVisible(true);
  };

  const toggleSidebar = () => {
    setIsSidebarVisible(prev => !prev);
    setMostrarFormulario(false);
  };

  const currentDate = new Date().toLocaleDateString();

  return (
    <div className="App">
      {/* El componente Menu se renderiza aquí. Su visibilidad se controla con la clase 'hidden'. */}
      <Menu
        onSelectCategory={manejarClickCategoria} // Cambiado a 'onSelectCategory' para claridad
        categoriesData={categoriesData} // Pasamos los datos estructurados de las categorías
        categoryDisplayImages={categoryToDisplayImageMap} // Pasamos el mapeo de imágenes para el display
        className={!isSidebarVisible ? 'hidden' : ''} // Añade la clase 'hidden' si isSidebarVisible es false
      />

      {/* El App-body es el contenedor del contenido principal. Su margen izquierdo se ajusta. */}
      <div className={`App-body ${!isSidebarVisible ? 'sidebar-hidden' : ''}`}>
        {/* El componente NavBar se renderiza dentro del App-body */}
        <NavBar
          onAddRecipe={handleAddRecipe}
          onToggleSidebar={toggleSidebar} // Pasa la función para alternar la barra lateral
          isSidebarVisible={isSidebarVisible} // Pasa el estado actual de visibilidad de la barra lateral
        />

        {/* Contenido principal: o el formulario o la receta detallada */}
        {mostrarFormulario ? (
          <form onSubmit={handleSubmit} className="recipe-form">
            <h2>Añadir Receta</h2>
            <label>
              Nombre:
              <input type="text" name="nombre" required />
            </label>
            <label>
              Ingredientes (separados por comas):
              <input type="text" name="ingredientes" required />
            </label>
            <label>
              Instrucciones:
              <textarea name="instrucciones" required></textarea>
            </label>
            <label>
              Imagen:
              <input type="file" name="imagen" accept="image/*" />
            </label>
            <button type="submit">Guardar Receta</button>
          </form>
        ) : (
          <div className="recipe-container details">
            <h1>Detalles de la Comida</h1>
            <h2>{recetaSeleccionada.nombre}</h2>
            <div className="image-details">
              {/* Aquí se muestra la imagen de la receta seleccionada */}
              <img src={recetaSeleccionada.imagen} alt={recetaSeleccionada.nombre} />
            </div>
            <h2>Ingredientes</h2>
            <ul>
              {recetaSeleccionada.ingredientes.map((ingrediente, index) => (
                <li key={index}>{ingrediente}</li>
              ))}
            </ul>
            <h2>Receta</h2>
            <p dangerouslySetInnerHTML={{ __html: recetaSeleccionada.instrucciones }} />
          </div>
        )}
      </div>

      {/* Pie de página (se mantiene comentado como lo tenías) */}
      <div className="footer">
        {/* <p>All rights reserved. Creado el: {currentDate} | Autor: Ambioris reyes</p> */}
      </div>
    </div>
  );
}

export default App;

TODAVIA NO ME CONTESTE DEJAME PASARTE TODO EL PROJECTO  ESTE ES App.css
/*  CSS  APP.CSS* --- ESTILOS GLOBALES Y CONTENEDORES PRINCIPALES ---  CSS  APP.CSS*/

/* Asegura que HTML y BODY permitan el scroll vertical de toda la página y eviten scroll horizontal. */
html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  /* Evita específicamente el scroll horizontal global */
  overflow-y: auto;
  /* Permite el scroll vertical de toda la página si el contenido es más largo. */
  scroll-behavior: smooth;
}

body {
  font-family: Arial, sans-serif;
  background-color: rgb(127, 204, 255);
}

/* Contenedor principal de la aplicación. Usa Flexbox para alinear la barra lateral y el contenido. */
.App {
  display: flex;
  min-height: 100vh;
  /* Asegura que la aplicación ocupe al menos la altura de la vista */
}

/* Contenedor del cuerpo principal (NavBar + Contenido de receta/formulario).
   Es un flex container en columna. */
.App-body {
  display: flex;
  flex-direction: column;
  /* Apila NavBar, Contenido de Receta/Formulario */
  flex-grow: 1;
  /* Permite que el App-body crezca y ocupe todo el espacio restante */
  flex-shrink: 1;
  /* Permite que el App-body se encoja si es necesario */
  flex-basis: auto;
  /* Ocupa el tamaño del contenido o el espacio restante */
  min-width: 0;
  /* ¡IMPORTANTE! Permite que el flex item se encoja sin desbordar. */

  padding: 10px 20px;
  box-sizing: border-box;
  margin-left: 260px;
  /* Margen inicial para dejar espacio a la barra lateral */
  transition: margin-left 0.3s ease;
}

/* Clase que se añade a .App-body cuando la barra lateral está oculta */
.App-body.sidebar-hidden {
  margin-left: 0;
  /* El contenido principal ocupa todo el ancho */
}

/* Estilo del contenedor de navegación (NavBar). */
.nav-container {
  display: flex;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto 20px auto;
  justify-content: space-between;
  /* Mantiene espacio entre ítems en escritorio */
  align-items: center;
  background-color: #333;
  padding: 10px 20px;
  color: white;
  box-sizing: border-box;
  border-radius: 8px;
  flex-wrap: wrap;
  /* Permite que los elementos se envuelvan a la siguiente línea */
  gap: 10px;
  /* Espacio entre los elementos flex */
}

/* Estilo de los botones dentro del NavBar */
.nav-container button {
  background-color: #4CAF50;
  color: white;
  border: none;
  padding: 8px 15px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9em;
  white-space: nowrap;
  /* Evita que el texto del botón se rompa en línea */
  transition: background-color 0.2s ease;
  flex-shrink: 0;
  /* Evita que los botones se encojan en distribuciones flexibles */
}

.nav-container button:hover {
  background-color: #45a049;
}

/* Estilo del contenedor de receta (el panel que muestra los detalles de la comida) */
.recipe-container {
  padding: 20px;
  background-color: #fff;
  width: 100%;
  max-width: 900px;
  margin: 0 auto 20px auto;
  box-sizing: border-box;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Detalles de la comida (contenido dentro de .recipe-container) */
.details {
  width: 100%;
  padding: 15px;
  background-color: hsla(182, 100%, 73%, 0.275);
  text-align: center;
  border-radius: 8px;
  box-sizing: border-box;
}

.details h1,
.details h2 {
  text-align: center;
  margin-bottom: 10px;
  color: #333;
  word-break: break-word;
  overflow-wrap: break-word;
}

.details .image-details img {
  display: block;
  margin: 20px auto;
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.details ul {
  list-style-type: disc;
  list-style-position: inside;
  padding: 0;
  margin: 0 auto;
  width: fit-content;
  text-align: left;
}

.details ul li {
  margin-bottom: 5px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding-left: 15px;
  box-sizing: border-box;
}

.details p {
  text-align: justify;
  max-width: 700px;
  margin: 10px auto;
  line-height: 1.6;
  color: #555;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

/* Estilo del formulario para añadir recetas */
.recipe-form {
  background-color: #0083cf75;
  padding: 20px;
  border: 1px solid #ccc;
  width: 100%;
  max-width: 900px;
  margin: 20px auto;
  box-sizing: border-box;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.recipe-form label {
  display: block;
  margin-bottom: 10px;
  text-align: left;
  font-weight: bold;
  color: #333;
}

.recipe-form input,
.recipe-form textarea {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.recipe-form textarea {
  resize: vertical;
  min-height: 100px;
}

.recipe-form button {
  background-color: #4CAF50;
  color: white;
  padding: 10px 15px;
  border: none;
  cursor: pointer;
  border-radius: 5px;
  transition: background-color 0.2s ease;
}

.recipe-form button:hover {
  background-color: #45a049;
}

/* Clases de color (si las usas para resaltar texto) */
.comida1 {
  color: blue;
}

.comida2 {
  color: green;
}


/* --- MEDIA QUERIES PARA RESPONSIVIDAD (App.css) --- */

/* Para tabletas y pantallas más pequeñas (máx. 768px de ancho) */
@media (max-width: 768px) {
  .App-body {
    margin-left: 0;
    /* El menú lateral se oculta por JS, no hay margen */
    padding: 10px;
  }

  .nav-container {
    padding: 8px 10px;
    justify-content: center;
    /* Centra los botones cuando se envuelven */
    /* Si quieres que empiecen a apilarse aquí en lugar de 480px,
           puedes añadir flex-direction: column; aquí también.
           Por ahora, mantengo el comportamiento de wrap horizontal hasta 480px. */
    gap: 5px;
  }

  .nav-container button {
    font-size: 0.85em;
    padding: 6px 12px;
    flex-basis: auto;
    /* Permite que el tamaño de los botones se ajuste al contenido */
    max-width: 100%;
    /* Asegura que no desborden */
  }

  .recipe-container,
  .recipe-form {
    width: 100%;
    max-width: none;
    /* Elimina la restricción de max-width en móvil para ocupar el espacio */
    padding: 15px;
  }

  .details {
    padding: 10px;
  }

  .details .image-details img {
    max-width: 100%;
  }

  .details p {
    font-size: 0.95em;
    text-align: left;
  }
}

/* Para teléfonos móviles muy pequeños (máx. 480px de ancho) */
@media (max-width: 480px) {
  .App-body {
    padding: 5px;
  }

  .nav-container {
    flex-direction: column;
    /* ¡CLAVE! Apila los botones verticalmente */
    align-items: stretch;
    /* Estira los botones para que ocupen todo el ancho del contenedor */
    padding: 5px 8px;
    gap: 5px;
    /* Sigue manteniendo el espacio entre ellos, ahora verticalmente */
    /* Es importante que no haya un justify-content: space-between; aquí que anule align-items: stretch; */
  }

  .nav-container button {
    margin-left: 0;
    /* Elimina cualquier margen izquierdo que pudiera desalinear */
    margin-bottom: 5px;
    /* Añade un pequeño espacio entre botones apilados */
    font-size: 0.8em;
    padding: 8px 10px;
    width: 100%;
    /* Asegura que cada botón ocupe el 100% del ancho disponible */
  }

  .recipe-container,
  .recipe-form {
    width: 100%;
    padding: 10px;
  }

  .details .image-details img {
    max-width: 100%;
  }

  .details p {
    font-size: 0.9em;
  }
}